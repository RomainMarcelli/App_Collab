require("dotenv").config();
const { Client, GatewayIntentBits } = require("discord.js");
const mongoose = require("mongoose");
const Ticket = require("../models/ticketModel"); 

// ‚úÖ Cr√©ation du client Discord
const ticketClient = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMessageReactions
    ]
});

// ‚úÖ Connexion √† MongoDB
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log("‚úÖ TicketBot connect√© √† MongoDB");
}).catch(err => console.error("‚ùå Erreur MongoDB :", err));

// ‚úÖ V√©rification de la connexion du bot
ticketClient.once("ready", () => {
    console.log(`‚úÖ TicketBot connect√© en tant que ${ticketClient.user.tag}`);

    // üîÑ V√©rification des alertes toutes les 10 secondes
    setInterval(() => {
        checkForAlerts();
    }, 10 * 1000);
});

// üîç **V√©rifie si des tickets ont d√©pass√© leur `alertTime` et envoie une alerte**
const checkForAlerts = async () => {
    console.log("üîç V√©rification des tickets en retard...");

    try {
        const now = new Date();

        // üîé R√©cup√®re les tickets dont l'alertTime est d√©pass√© et qui n'ont pas encore √©t√© signal√©s
        const alertTickets = await Ticket.find({
            alertTime: { $lte: now },
            alertSent: false
        }).sort({ alertTime: 1 });

        if (alertTickets.length === 0) {
            console.log("‚úÖ Aucun ticket √† signaler.");
            return;
        }

        const channel = ticketClient.channels.cache.get(process.env.DISCORD_CHANNEL_ID);
        if (!channel) {
            console.error("‚ùå Impossible de trouver le canal Discord ! V√©rifie l'ID.");
            return;
        }

        for (const ticket of alertTickets) {
            console.log(`‚ö†Ô∏è Envoi d'une alerte pour le ticket ${ticket.ticketNumber}...`);

            // üî• Message personnalis√©
            const alertMessage = `üö® **Pouvez-vous traiter le ticket "${ticket.ticketNumber}" svp ? C'est une P${ticket.priority}** üö®`;

            await channel.send(alertMessage);

            // ‚úÖ Marque le ticket comme alert√© pour √©viter les doublons
            await Ticket.updateOne({ _id: ticket._id }, { alertSent: true });

            console.log(`‚úÖ Alerte envoy√©e pour le ticket ${ticket.ticketNumber}`);
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification des alertes :", error);
    }
};

// ‚úÖ Commande !alltickets pour voir tous les tickets
ticketClient.on("messageCreate", async (message) => {
    if (message.author.bot) return;

    if (message.content === "!alltickets") {
        console.log("üì© Commande !alltickets re√ßue");

        const tickets = await Ticket.find().sort({ deadline: 1 });

        if (tickets.length === 0) {
            return message.channel.send("üì≠ Aucun ticket en cours !");
        }

        let ticketList = "**üìã Tous les tickets :**\n";
        tickets.forEach((ticket, index) => {
            ticketList += `\n**${index + 1}. Ticket :** ${ticket.ticketNumber}\nüìå **Priorit√© :** ${ticket.priority}\n‚è≥ **Deadline :** ${new Date(ticket.deadline).toLocaleString()}\nüîî **Alerte pr√©vue :** ${new Date(ticket.alertTime).toLocaleString()}\n---`;
        });

        message.channel.send(ticketList);
    }
});

// ‚úÖ Commande !deleteticket pour supprimer un ticket
ticketClient.on("messageCreate", async (message) => {
    if (message.author.bot) return;

    const args = message.content.split(" ");
    if (args[0] === "!deleteticket") {
        if (args.length < 2) {
            return message.reply("‚ùå **Utilisation:** `!deleteticket [ticketNumber]`");
        }

        const ticketNumber = args[1];

        try {
            const deletedTicket = await Ticket.findOneAndDelete({ ticketNumber });

            if (!deletedTicket) {
                return message.reply(`Ticket **${ticketNumber}** introuvable.`);
            }

            message.reply(`‚úÖ Ticket **${ticketNumber}** supprim√© avec succ√®s.`);
            console.log(`‚úÖ Ticket supprim√©: ${ticketNumber}`);
        } catch (error) {
            console.error("‚ùå Erreur lors de la suppression du ticket:", error);
            message.reply("‚ùå Une erreur s'est produite lors de la suppression du ticket.");
        }
    }
});

// ‚úÖ Connexion du bot avec son propre token
ticketClient.login(process.env.DISCORD_TICKET_BOT_TOKEN).catch(err => {
    console.error("‚ùå Erreur de connexion au TicketBot :", err);
});

module.exports = { ticketClient };
