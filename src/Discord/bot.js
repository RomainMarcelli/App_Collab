require("dotenv").config();
const { Client, GatewayIntentBits } = require("discord.js");
const mongoose = require("mongoose"); // ‚úÖ Import de mongoose
const { checkForAlerts } = require("../controllers/notifController"); // ‚úÖ Import des alertes
const Notif = require("../models/notifModel"); // ‚úÖ Import du mod√®le des notifications

// ‚úÖ Cr√©ation du client Discord
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// ‚úÖ Connexion √† MongoDB
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log("‚úÖ Connect√© √† MongoDB");
}).catch(err => console.error("‚ùå Erreur MongoDB :", err));

// ‚úÖ V√©rification de la connexion du bot
client.once("ready", () => {
    console.log(`‚úÖ Bot connect√© en tant que ${client.user.tag}`);
    
    const channel = client.channels.cache.get(process.env.DISCORD_CHANNEL_ID);
    if (!channel) {
        console.error("‚ùå Impossible de trouver le canal Discord ! V√©rifie l'ID.");
    } else {
        channel.send("‚úÖ Bot en ligne et pr√™t √† envoyer des alertes !");
    }

    console.log("üöÄ V√©rification des alertes activ√©e !");
    setInterval(async () => {
        await checkForAlerts(client);
    }, 10 * 1000); // ‚úÖ V√©rifie les alertes toutes les 10 secondes
});

client.on("messageCreate", async (message) => {
    if (message.author.bot) return; // Ignore les messages des bots

    if (message.content === "!tickets") {
        const tickets = await Notif.find({ alertSent: false }).sort({ deadline: 1 }); // ‚úÖ R√©cup√®re les tickets tri√©s par deadline

        if (tickets.length === 0) {
            return message.channel.send("üì≠ Aucun ticket actif pour le moment !");
        }

        let ticketList = "**üìã Liste des tickets actifs :**\n";
        tickets.forEach((ticket, index) => {
            ticketList += `\n**${index + 1}. Ticket :** ${ticket.ticketNumber}\nüìå **Priorit√© :** ${ticket.priority}\n‚è≥ **Deadline :** ${new Date(ticket.deadline).toLocaleString()}\nüîî **Alerte pr√©vue :** ${new Date(ticket.alertTime).toLocaleString()}\n---`;
        });

        message.channel.send(ticketList);
    }
});

// ‚úÖ √âcoute les messages pour d√©tecter `!delete`
client.on("messageCreate", async (message) => {
    if (message.author.bot) return; // Ignore les messages des bots

    const args = message.content.split(" ");
    const command = args[0];

    if (command === "!delete") {
        if (args.length < 2) {
            return message.reply("‚ùå **Utilisation:** `!delete [ticketNumber]`");
        }

        const ticketNumber = args[1];

        try {
            const deletedTicket = await Notif.findOneAndDelete({ ticketNumber });

            if (!deletedTicket) {
                return message.reply(`‚ö†Ô∏è Ticket **${ticketNumber}** introuvable.`);
            }

            message.reply(`‚úÖ Ticket **${ticketNumber}** supprim√© avec succ√®s.`);
            console.log(`üóëÔ∏è Ticket supprim√©: ${ticketNumber}`);
        } catch (error) {
            console.error("‚ùå Erreur lors de la suppression du ticket:", error);
            message.reply("‚ùå Une erreur s'est produite lors de la suppression du ticket.");
        }
    }
});

// ‚úÖ Connexion du bot avec le token
client.login(process.env.DISCORD_TOKEN).catch(err => {
    console.error("‚ùå Erreur de connexion au bot Discord :", err);
});


module.exports = { client }; // ‚úÖ Export du client pour pouvoir l'utiliser dans d'autres fichiers
