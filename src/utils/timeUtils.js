// üìÖ Jours f√©ri√©s r√©currents (peu importe l'ann√©e)
const holidaysRecurring = [
    "01-01", // Jour de l'an
    "05-01", // F√™te du travail
    "05-08", // Victoire 1945
    "07-14", // F√™te nationale
    "08-15", // Assomption
    "11-11", // Armistice
    "12-25", // No√´l
];

// üìÖ Jours f√©ri√©s sp√©cifiques √† certaines ann√©es (√† compl√©ter si besoin)
const holidaysSpecific = [
    "2025-05-29", // Ascension
    "2025-06-09", // Lundi de Pentec√¥te
];

// ‚úÖ V√©rifie si une date donn√©e est un jour f√©ri√© (r√©current ou sp√©cifique)
const isHoliday = (date) => {
    const mmdd = date.toISOString().slice(5, 10); // ex: "05-01"
    const yyyymmdd = date.toISOString().slice(0, 10); // ex: "2025-05-29"
    
    return holidaysRecurring.includes(mmdd) || holidaysSpecific.includes(yyyymmdd);
};

// ‚úÖ V√©rifie si une date est un jour ouvr√© (pas week-end ni f√©ri√©)
const isBusinessDay = (date) => {
    const day = date.getDay();
    return day !== 0 && day !== 6 && !isHoliday(date); // 0 = dimanche, 6 = samedi
};

// ‚è∞ Ajoute un certain nombre d'heures ouvr√©es √† une date donn√©e
const addBusinessHours = (date, hours) => {
    let remainingMinutes = hours * 60; // Convertit les heures en minutes pour plus de pr√©cision
    let newDate = new Date(date);

    while (remainingMinutes > 0) {
        newDate.setMinutes(newDate.getMinutes() + 1);

        // Si on d√©passe 18h ‚Üí passer au lendemain √† 9h
        if (newDate.getHours() >= 18) {
            newDate.setDate(newDate.getDate() + 1);
            newDate.setHours(9, 0, 0, 0);
        }

        // Si on est sur un jour non ouvr√© (week-end ou f√©ri√©), sauter au jour ouvr√© suivant
        while (!isBusinessDay(newDate)) {
            newDate.setDate(newDate.getDate() + 1);
            newDate.setHours(9, 0, 0, 0); // Commencer √† 9h le jour ouvr√© suivant
        }

        remainingMinutes--;
    }

    return newDate;
};

// üìÜ Ajoute un certain nombre de jours ouvr√©s √† une date donn√©e
const addBusinessDays = (date, days) => {
    let remainingDays = days;
    let newDate = new Date(date);

    while (remainingDays > 0) {
        newDate.setDate(newDate.getDate() + 1); // Avance d'un jour

        // Saute les jours non ouvr√©s (week-ends + f√©ri√©s)
        while (!isBusinessDay(newDate)) {
            newDate.setDate(newDate.getDate() + 1);
        }

        remainingDays--;
    }

    return newDate;
};

module.exports = { addBusinessHours, addBusinessDays };
